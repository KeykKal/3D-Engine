#version 400 core

//note to my self fucking clean this
//also inform your self about edge detecting we are so close


in vec4 colour;

in vec2 pass_textureCoords;
in vec3 pass_pos;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

in mat4 pass_viewMatrix;
in vec4 pass_worldPosition;

in vec4 eyePos;

out vec4 out_Colour;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;


uniform sampler2D depthTex;
uniform vec3 lightColour[4];
uniform vec3 attenuantion[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;


uniform float invWidth;
uniform float invHeight;

float coverage = 0.8;  

vec4 col;

const float quantizationLevel = 4.0;
const float offset = 1.0f / 300.0f;

//for the depth values
float near = .1;
float far = 10.;


void main(void){

	//main shader i recommend to not change that
	
	vec4 blendMapColor = texture(blendMap, pass_textureCoords);

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	//Multi Texturing
	float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
	
	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;
	
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	for(int i = 0; i<4; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuantion[i].x + (attenuantion[i].z*distance)+(attenuantion[i].z*(distance*distance));
		vec3 unitLightVector = normalize(toLightVector[i]);
	
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		
		vec3 LightDir = -unitLightVector;
		vec3 reflectedLightDirection = reflect(LightDir, unitNormal);
		
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera); 
		specularFactor = max(specularFactor,0);
		
		float dampedFactor = pow(specularFactor, shineDamper);
		
		//for cel-shading/toon shading
	 	float level = floor(brightness * quantizationLevel);
		brightness = level/quantizationLevel;
		level = floor(dampedFactor * quantizationLevel);
		dampedFactor = level/quantizationLevel;
		
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.1);
	
	
	//My side projects

	//outline

	//https://gamedev.stackexchange.com/questions/133676/what-is-the-best-way-to-draw-outline-of-object-using-opengl
	//One way would be to draw the object or character you wish to outline by itself
	//into a depth-only buffer. Then you could run an edge detector on the depth 
	//buffer to find the edges of the object. Finally, take the resulting edge image
	//and overlay it on the scene.

	//1. shoot a ray 
	//2. get the edge of an object 
	//3. color the edge of the objects
	//4.
	//5. success
	//6. new plan edge detection method
	//7. new plan i give up
	
	//depth calculations
	//float z_ndc = gl_FragCoord.z * 2.0 - 1.0;
	//float depth = (2.0 * near * far) / (far + near - z_ndc * (far - near));
	//depth /= far;


	col = vec4(totalDiffuse +.1,1.0) * totalColor + vec4(totalSpecular,1);
	//finished shader
	
	out_Colour = col;//vec4(vec3(depth), 1.0);
	out_Colour = mix(vec4(skyColor, 1.0), out_Colour, visibility);
}