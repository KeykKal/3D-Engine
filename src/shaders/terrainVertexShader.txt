#version 400 core

in vec3 position;
in vec2 textureCoords; //uvs
in vec3 normal;

out vec4 colour;

out vec3 pass_pos;
out vec2 pass_textureCoords;
out vec4 pass_worldPosition;

out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;


out mat4 pass_viewMatrix;
out vec4 eyePos;


uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform vec3 lightPosition[4];

uniform vec4 plane;

const float density = 0.0035;
const float gradient = 5.;

void main(void){
	pass_pos = position;
	pass_viewMatrix = viewMatrix;
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;
	
	pass_worldPosition = worldPosition;
	
	eyePos = vec4(viewMatrix * transformationMatrix) * vec4(position,0);
	
	gl_Position = projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = textureCoords;
	
	surfaceNormal = (transformationMatrix * vec4(normal,0.0)).xyz;
	for(int i = 0; i<4; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;	
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0,0,0,1)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	
	//My side projects

	
}