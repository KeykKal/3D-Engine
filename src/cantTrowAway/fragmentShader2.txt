#version 450 core

in vec4 colour;

in vec2 pass_textureCoords;
in vec3 pass_pos;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

in mat4 pass_viewMatrix;
in vec4 pass_worldPosition;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

vec4 col;

const float quantizationLevel = 3.;//5.0;
const int MAX_STEPS = 100;
const float MAX_DIST = 100.;
const float SURFACE_DIST = .01; 

//for the depth values
float near = .1;
float far = 10.;

int numCircles = 10;

float getDist(vec3 p){
	vec4 s = vec4(0,1,6,1);
	
	float sphereDist = length(p-s.xyz)-s.w;
	float planeDist = p.y;
	float d = min(sphereDist, planeDist);
	
	return d;
}

float RayMarch(vec3 ro, vec3 rd){
	float dO = 0.;
	for(int i=0; i < MAX_STEPS; i++){
		vec3 p = ro + dO*rd;
		float dS = getDist(p);
		dO += dS;
		if(dS < SURFACE_DIST || dO > MAX_STEPS) break;
	}
	return dO;
}



//float length(vec2 v){
//	return sqrt(v.x*v.x + v.y*v.y);
//}

float signedDstToCircle(vec2 p, vec2 centre, float radius){
	return length(centre-p) - radius;
}

float signedDstToBox(vec2 p, vec2 centre, vec2 size){
	vec2 offset = abs(p-centre)-size;
	
	float unsignedDst = length(vec2(max(offset.x, 0), max(offset.y, 0)));
	
	float dstInsideBox = max(min(offset.x, 0), 0);
	return unsignedDst + dstInsideBox;
}


void main(void){

	//main shader i recommend to not change that
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.1);
	
	//for cel-shading/toon shading
	float level = floor(brightness * quantizationLevel);
	brightness = level/quantizationLevel;
	
	vec3 diffuse = brightness * lightColour;

	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 LightDir = -unitLightVector;
	vec3 reflectedLightDirection = reflect(LightDir, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera); 
	specularFactor = max(specularFactor,0);
	
	float dampedFactor = pow(specularFactor, shineDamper);
	//for cel-shading/toon shading
	level = floor(dampedFactor * quantizationLevel);
	dampedFactor = level/quantizationLevel;
	vec3 finaleSpecular = dampedFactor * reflectivity * lightColour;
	
	//My side projects
	
	//Toon Shader

	//outline

	

	//1. shoot a ray 
	//2. get the edge of an object 
	//3. color the edge of the objects
	//4.
	//5. success
	
	//wireFrame method
	  

	//finished shader
	col = vec4(diffuse+.1,1.0) * texture(textureSampler, pass_textureCoords) + vec4(finaleSpecular,1);
	
	
	//raymarch
	vec3 ro = vec3(0,1,0);
	vec3 rd = normalize(vec3(pass_textureCoords.x, pass_textureCoords.y, 1));
	float d = RayMarch(ro, rd);
	d /= 200.;
	col = vec4(d);
	out_Colour = col;//vec4(0.04, 0.28, 0.26, 1.0); //vec4(vec3(depth), 1.0);
	
}