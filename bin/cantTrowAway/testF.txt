#version 450 core

in vec4 colour;

in vec2 pass_textureCoords;
in vec3 pass_pos;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

in mat4 pass_viewMatrix;
in vec4 pass_worldPosition;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

vec4 col;

const float quantizationLevel = 3.;//5.0;
const int MAX_STEPS = 100;
const float MAX_DIST = 100.;
const float SURFACE_DIST = .01; 

//for the depth values
float near = .1;
float far = 10.;

float width = 1250;
float height = 780;

void make_kernel(inout vec4 n[9], sampler2D tex, vec2 coord)
{




  // sampling just these 3 neighboring fragments keeps the outline thin.


  // the rest is pretty arbitrary, but seemed to give me the
  // best-looking results for whatever reason.


  



  
    // threshold and scale.

}

void main(void) {
	float dx = 1.0 / width;
	float dy = 1.0 / height;
	
  	vec3 center = sampleNrm( surfaceNormal.xy, vec2(0.0, 0.0) );
  	
  	vec3 top = sampleNrm( surfaceNormal.xy, vec2(0.0, dy) );
  	vec3 topRight = sampleNrm( surfaceNormal.xy, vec2(dx, dy) );
  	vec3 right = sampleNrm( surfaceNormal.xy, vec2(dx, 0.0) );
  	
  	vec3 t = center - top;
  	vec3 r = center - right;
  	vec3 tr = center - topRight;
  	
    t = abs( t );
  	r = abs( r );
  	tr = abs( tr );
  	
  	  float n;
  n = max( n, t.x );
  n = max( n, t.y );
  n = max( n, t.z );
  n = max( n, r.x );
  n = max( n, r.y );
  n = max( n, r.z );
  n = max( n, tr.x );
  n = max( n, tr.y );
  n = max( n, tr.z );
  
  n = 1.0 - clamp( clamp((n * 2.0) - 0.8, 0.0, 1.0) * 1.5, 0.0, 1.0 );
  out_Colour = vec4(n);
}